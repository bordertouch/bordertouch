{"version":3,"sources":["components/BirthdaysBlock.tsx","components/EmployeesBlock.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BirthdaysBlock","months","chosenEmployees","monthsWithUsers","useMemo","map","month","idx","title","users","filter","user","Date","dob","getMonth","useEffect","localStorage","setItem","JSON","stringify","properArr","parse","getItem","className","lastName","firstName","toDateString","EmployeesBlock","alphabet","setUsers","setChosenEmployees","activeUsersId","id","userEqualsLetter","letter","u","length","onChangeHandler","e","currentTarget","value","console","log","filteredEmployees","removeChosenEmployee","includes","type","defaultChecked","name","onChange","App","useState","fetch","then","response","json","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3bff8db2.chunk.js","sourcesContent":["import React, {useEffect, useMemo} from \"react\";\r\nimport { EmployeeType } from \"../App\";\r\nimport '../App.css'\r\n\r\ntype PropsType = {\r\n    months: string[]\r\n    chosenEmployees: EmployeeType[]\r\n}\r\n\r\n\r\nexport const BirthdaysBlock: React.FC<PropsType> = ({months, chosenEmployees}) => {\r\n\r\n    const monthsWithUsers = useMemo(() => {\r\n        return months.map((month, idx) => ({\r\n            title: month,\r\n            users: chosenEmployees.filter((user) => new Date(user.dob).getMonth() === idx)\r\n        }))\r\n    }, [chosenEmployees]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('monthsWithUsers', JSON.stringify(monthsWithUsers))\r\n    },[monthsWithUsers])\r\n\r\n    const properArr: { title: string, users: EmployeeType[] }[] = (JSON.parse(localStorage.getItem('monthsWithUsers') || ''))\r\n\r\n\r\n\r\n    return (\r\n        <div className={'birthdays'}>\r\n            <h2>Birthdays</h2>\r\n            <div>\r\n                {properArr.map(({title, users}) => (\r\n                    <div key={title}>\r\n                        <h3>{title}</h3>\r\n                        <div>{users.map(({lastName,firstName, dob }) => (\r\n                            <div>{`${lastName} ${firstName} - ${new Date(dob).toDateString()}`}</div>\r\n                        ))}</div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent, useMemo} from \"react\";\r\nimport { EmployeeType } from \"../App\";\r\nimport '../App.css'\r\n\r\ntype PropsType = {\r\n    alphabet: string[]\r\n    users: EmployeeType[]\r\n    setUsers: (users: EmployeeType[]) => void\r\n    chosenEmployees: EmployeeType[]\r\n    setChosenEmployees: (users: EmployeeType[]) => void\r\n}\r\n\r\nexport const EmployeesBlock: React.FC<PropsType> = ({alphabet, users, setUsers,\r\n                                                    chosenEmployees, setChosenEmployees,\r\n                                                    }) => {\r\n\r\n    const activeUsersId = useMemo(( ) => {\r\n        return chosenEmployees.map(({id}) => id)\r\n    },[chosenEmployees])\r\n\r\n    const userEqualsLetter = (user: EmployeeType, letter: string) => {\r\n        if (user.lastName[0] === letter) return user\r\n    }\r\n\r\n    const removeChosenEmployee = (id: string) => {\r\n        const filteredEmployees = chosenEmployees.filter(u => u.id !== id)\r\n        setChosenEmployees(filteredEmployees)\r\n    }\r\n\r\n\r\nreturn (\r\n        <div className=\"table\">\r\n            {alphabet.map((letter) => (\r\n                <div key={letter} className={'column'}>{letter}\r\n                    <div className={'employee-list'}>\r\n                        {users.filter((u) => userEqualsLetter(u, letter)\r\n                        ).length ? users.filter((u) => userEqualsLetter(u, letter)\r\n                        ).map((u) => {\r\n\r\n                                const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                                    if (e.currentTarget.value === 'active') {\r\n                                        setChosenEmployees([u, ...chosenEmployees])\r\n                                        console.log(chosenEmployees)\r\n                                        // setActiveValue(u.id)\r\n                                    } else {\r\n                                        // setActiveValue('')\r\n                                        removeChosenEmployee(u.id)\r\n                                        console.log(chosenEmployees)\r\n                                    }\r\n                                }\r\n\r\n                                return <div>\r\n                                    <div\r\n                                        className={activeUsersId.includes(u.id) ? 'active' : ''}>{u.lastName} {u.firstName}</div>\r\n                                    <div className={'radio-group'}>\r\n                                        <label>\r\n                                            <input type={'radio'} value={'not active'} defaultChecked={true}\r\n                                                   name={u.firstName}\r\n                                                   onChange={onChangeHandler}/>Not active\r\n                                        </label>\r\n                                        <label>\r\n                                            <input type={'radio'} value={'active'} name={u.firstName}\r\n                                                   onChange={onChangeHandler}/>Active\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                        ) : <div> No employees </div>}\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>)\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport { BirthdaysBlock } from './components/BirthdaysBlock';\nimport {EmployeesBlock} from \"./components/EmployeesBlock\";\n\n\nexport type EmployeeType = {\n    id: string\n    firstName: string\n    lastName: string\n    dob: string\n}\n\nconst alphabet = [\n    \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\",\n    \"W\", \"X\", \"Y\", \"Z\",\n]\n\nconst months = [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',\n    'September', 'October', 'November', 'December'\n]\n\nconst App: React.FC = () => {\n\n\n    const [users, setUsers] = useState<EmployeeType[]>([])\n\n    const [chosenEmployees, setChosenEmployees] = useState<EmployeeType[]>([])\n\n\n    useEffect(() => {\n        fetch(\"https://yalantis-react-school-api.yalantis.com/api/task0/users\")\n            .then((response) => {\n                return response.json();\n            })\n            .then((data) => {\n                setUsers(data);\n            });\n    }, []);\n\n\n\n    return (\n        <div className={'wrapper'}>\n\n            <EmployeesBlock alphabet={alphabet} users={users} setUsers={setUsers} chosenEmployees={chosenEmployees}\n                            setChosenEmployees={setChosenEmployees}\n            />\n            <BirthdaysBlock months={months} chosenEmployees={chosenEmployees}/>\n\n        </div>)\n\n\n}\nexport default App;\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}